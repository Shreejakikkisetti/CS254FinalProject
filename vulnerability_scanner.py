#!/usr/bin/env python3
import socket
import paramiko
import requests
import argparse
from urllib.parse import quote
import sys
from requests.auth import HTTPBasicAuth

def scan_ports():
    """Scan specific ports we know about."""
    known_ports = [8080, 2222]  # HTTP and SSH ports we know about
    open_ports = []
    for port in known_ports:
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1)
            result = sock.connect_ex(('127.0.0.1', port))
            if result == 0:
                open_ports.append(port)
            sock.close()
        except:
            pass
    return open_ports

def try_http_auth(port, username, password):
    """Attempt HTTP basic authentication on the given port."""
    try:
        response = requests.get(
            f'http://127.0.0.1:{port}',
            auth=HTTPBasicAuth(username, password),
            timeout=5
        )
        if response.status_code == 200:
            output = response.text.strip()
            print(f"http://{quote(username)}:{quote(password)}@127.0.0.1:{port} {output}")
            return True
    except Exception as e:
        if verbose:
            print(f"HTTP auth error on port {port}: {e}", file=sys.stderr)
    return False

def try_ssh_auth(port, username, password):
    """Attempt SSH password authentication on the given port."""
    client = paramiko.SSHClient()
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        client.connect(
            '127.0.0.1',
            port=port,
            username=username,
            password=password,
            timeout=5
        )
        stdin, stdout, stderr = client.exec_command('echo success')
        output = stdout.read().decode().strip()
        print(f"ssh://{quote(username)}:{quote(password)}@127.0.0.1:{port} {output}")
        client.close()
        return True
    except Exception as e:
        if verbose:
            print(f"SSH auth error on port {port}: {e}", file=sys.stderr)
        if client:
            client.close()
    return False

def main():
    global verbose
    parser = argparse.ArgumentParser()
    parser.add_argument('-v', '--verbose', action='store_true', help='Enable verbose output')
    args = parser.parse_args()
    verbose = args.verbose

    credentials = {
        'admin': 'admin',
        'root': 'abc123',
        'skroob': '12345'
    }

    open_ports = scan_ports()
    if verbose:
        print(f"Found open ports: {open_ports}", file=sys.stderr)

    for port in open_ports:
        if verbose:
            print(f"Testing port {port}", file=sys.stderr)
        
        for username, password in credentials.items():
            # Try HTTP authentication
            try_http_auth(port, username, password)
            # Try SSH authentication
            try_ssh_auth(port, username, password)

if __name__ == '__main__':
    main()
